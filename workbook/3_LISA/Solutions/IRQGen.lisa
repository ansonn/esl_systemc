// This file was generated by System Generator Canvas
// --------------------------------------------------

//
// IRGQGen
// Simple interrupt generating component
// 

component IRQGen
{
    composition
    {
	pvbusslave : PVBusSlave();
    }
    connection
    {
        pvbusslave.device => self.pvbdevice_s;
        self.pvbus_s => pvbusslave.pvbus_s;
        self.control => pvbusslave.control;
    }

  //
  // resources
  //
  resources
  {
    bool signalState;
  }

  //
  // reset
  //
  behavior reset(int level)
  {
     composition.reset(level);
     signalState = false;
     control.setAccess(0x0, 0x4, pv::ACCESSTYPE_RW, pv::ACCESSMODE_DEVICE);
  }

  //
  // Bus slave port and pvbus implementation
  //
  slave port<PVBus> pvbus_s; 

  internal master port<PVBusSlaveControl> control;

  internal slave port<PVDevice> pvbdevice_s
  {
  //
  // Read
  //

    behavior read(pv::ReadTransaction tx):pv::Tx_Result
    {
      switch (tx.getAccessWidth())
      {
        case pv::ACCESS_8_BITS :
          tx.setReturnData8( signalState ? 1 : 0 );
          break;

        case pv::ACCESS_16_BITS :
          tx.setReturnData16( signalState ? 1 : 0 );
          break;

        case pv::ACCESS_32_BITS :
          tx.setReturnData32( signalState ? 1 : 0 );
          break;

        case pv::ACCESS_64_BITS :
          tx.setReturnData64( signalState ? 1 : 0 );
          break;

        default:
          // Unsupported access size!
          // Consider adding an error message here
          return tx.generateSlaveAbort(); 
      }
      return tx.readComplete();
    }

    //
    // Write
    //
    behavior write(pv::WriteTransaction tx):pv::Tx_Result
    {
      if (signalState == true)
      {
        // Irq currently asserted, so de-assert
        irq.setValue( sg::Signal::Clear);
        signalState = false;
      }
      else
      {
        // Irq  currently de-asserted. so assert
        irq.setValue( sg::Signal::Set);
        signalState = true;
      }
  
      return tx.writeComplete();
    }

    behavior debugRead(pv::ReadTransaction tx) : pv::Tx_Result
    {
      return this->pvbdevice_s.read(tx);    
    }
    
    behavior debugWrite(pv::WriteTransaction tx) : pv::Tx_Result
    {   
       return this->pvbdevice_s.write(tx);    
    }
  }

  //
  // Signal master port
  //
  master port<Signal> irq;
}
