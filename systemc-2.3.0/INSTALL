                INSTALL NOTES FOR SystemC Release 2.3
                -------------------------------------

Contents:

        1. Installation Notes for Unix 

        2. Installation Notes for Windows


1. Installation Notes for Unix
------------------------------


System Requirements
===================

SystemC can be installed on the following UNIX, or UNIX-like platforms:

    o 32-bit Linux (x86) (RedHat Enterprise Linux 4, 5, 6; Fedora 14, 15;
      Debian 5.0; Ubuntu 10.04LTS, 12.04LTS) with GNU C++ compiler versions
      gcc-3.3.2 through gcc-4.7.0
    o 32-bit Linux (x86) (Debian, Ubuntu 12.04LTS) with Clang C++ compiler
      version clang-2.9 through clang-3.1
    o 64-bit Linux (x86_64) (RedHat Enterprise Linux 4, 5, 6; Fedora 17;
      Debian 5.0; Ubuntu 10.04LTS, 12.04LTS) with GNU C++ compiler versions
      gcc-3.4.5 through gcc-4.7.0
    o 64-bit Linux (x86_64) (Ubuntu 12.04LTS) with Clang C++ compiler
      version clang-3.1
    o 64-bit Linux (x86_64) (Debian 5.0) with 32-bit GNU C++ compiler version
      gcc-4.1.1 through gcc-4.7.0 (./configure --target=i686-linux-gnu)
    o Sun Solaris 9 (sparc32) with GNU C++ compiler version gcc-3.3.3
      through gcc-4.4.6
    o 32-bit Mac OS X (ppc, i386) (10.5 Leopard, 10.6 Snow Leopard, 10.7 Lion)
      with GNU C++ compiler versions gcc-3.1 through gcc-4.2.1
    o 64-bit Mac OS X (x86_64) (10.6 Snow Leopard, 10.7 Lion) with
      GNU C++ compiler version gcc-4.2.1
    o 32-bit FreeBSD 7.4 with GNU C++ compiler version gcc-4.2.1
    o Windows 7 SP1, Microsoft Visual C++ 2005 SP1 (8.0)
    o Windows 7 SP1, Microsoft Visual C++ 2008 SP1 (9.0)
    o Windows 7 SP1, Microsoft Visual C++ 2010     (10.0)
    o Windows XP Prof. SP3, with Microsoft Visual C++ 2010 (10.0)
    o Windows XP Prof. SP3 (Cygwin 1.5.25) with GNU C++ compiler
      version gcc-4.3.2
    o Windows XP Prof. SP3 (Msys 1.0.16) with MinGW32
      GNU C++ compiler version gcc-4.5.2 through gcc-4.6.2

An installation of SystemC on other, related platforms may be
possible as well.


Sources for Compilers and Related Tools
=======================================

To build, install, and use SystemC on UNIX platforms, you need
the following tools:

  1. GNU C++ compiler, version 3.3.2 or later
     or
     Clang C++ compiler version clang-2.9 or later

  2. GNU Make (gmake)

GCC, Clang, and gmake are free software that you can
obtain from the following sources:

  GCC           http://www.gnu.org/software/gcc/gcc.html

  Clang         http://clang.llvm.org/

  gmake         http://www.gnu.org/software/make/make.html


Basic SystemC Installation
==========================

To install SystemC on a UNIX system, do the following steps:

  1. Change to the top level directory (systemc-2.3.0)

  2. Create a temporary directory, e.g.,

        > mkdir objdir

  3. Change to the temporary directory, e.g.,

        > cd objdir

  4. Set the following environment variable(s):

     For gcc compilers on Solaris:

        > setenv CXX g++

     For SC6.1 or SC6.2 on Solaris:

        > setenv CXX CC

     For gcc compilers on Linux:

        > setenv CXX g++

     For gcc compilers on MacOS X:

        > setenv CXX g++

     For aCC on HP-UX:

        > setenv CXX aCC

     You can also specify an absolute path to the compiler of your choice.

  5. Configure the package for your system, e.g.,
     (The configure script is explained below.)

        > ../configure

     While the 'configure' script is running, which takes a few moments, 
     it prints messages to inform you of the features it is checking.
     It also detects the platform.
     
     Note for System V users: 
     If you are using `csh' on an older version of System V, you might 
     need to use the `sh ../configure' command instead of '../configure'.
     Otherwise, `csh' will attempt to `configure' itself.

     SystemC 2.3 includes a fixed-point package that is always built.
     When compiling your applications with fixed-point types, you still have
     to use compiler flag -DSC_INCLUDE_FX. Note that compile times increase
     significantly when using this compiler flag.

     In case you want to install the package in another place than the
     top level directory (systemc-2.3.0), configure the package e.g. as
     follows:

        > ../configure --prefix=/usr/local/systemc-2.3.0

     Note: make sure you have created the target directory before installing
           the package. Do _not_ use /usr/local as a prefix.

     Several options are available to the configure script to modify
     the compiler configuration and the selection of certain features:

       --disable-shared        do not build shared library (libsystemc.so)
       --enable-debug          include debugging symbols
       --disable-optimize      disable compiler optimization
       --disable-async-updates disable request_async_update support
       --enable-pthreads       use POSIX threads for SystemC processes

     See the section on the general usage of the configure script and
     "../configure --help" for more information.

     Note: if you change the configuration after having compiled the
           package already, you should run a "gmake clean" before
           recompiling.

  6. Compile the package.

        > gmake

     Note: The explicit gmake targets "opt" and "debug", etc. have
           been removed in this package.  Use the corresponding
           options to the configure script instead.

  7. Install the package.

        > gmake install
  
  8. At this point you may wish to verify the installation by 
     testing the example suite.

        > gmake check

     this will compile and run the examples in the subdirectory
     examples.

  9. You can now remove the temporary directory, .e.g,

        > cd ..
        > rm -rf objdir

     Alternatively, you can keep the temporary directory to allow
     you to:

     a) Experiment with the examples.

     b) Later uninstall the package. To clean up the temporary 
        directory, enter:

            > gmake clean

        To uninstall the package, enter:

            > gmake uninstall


Running the Examples
====================

A copy of the examples reside in the temporary directory - see 
instruction 8 above for details on building and running them. 

In addition, a copy of the example code resides in the directory
examples at the highest level of the installation.

Use the makefiles provided in  the 'examples' directory as templates 
for makefiles you need for compiling your own examples.
        
     
Using the Configure Script
==========================
 
The `configure' shell script tries to determine the correct values for
various system-dependent variables used during compilation. It uses
these values to create a `Makefile' in each directory of the package.
It also creates one or more `.h' files containing system-dependent
definitions if needed. Then, it creates the following files:

  config.status         A shell script that you can run at another time to
                        recreate the current configuration.

  config.cache          A file in which the configure test results are
                        saved to speed up reconfiguration.

                        Data is appended to the config.cache file. 
                        You can remove unwanted data.

  config.log            A file in which compiler output is saved.
                        This is used to debug the configure script.

If you need to use other commands to successfully compile the package
on your system, please try to determine if the configure script can be used 
for these commands. Then, send either a diff file or instructions about
the commands you used to the email address provided in the README file.
This information will be used to improve the installation process in
the next release.

The `configure.in' file is provided in case you want to change or regenerate
the `configure' script, for example to use a newer version of `autoconf'. 
The `configure.in' file is used by the `autoconf' program to create the
`configure' script.

Note for (key) developers:

  In case you have changed the `configure.in' file or one of the
  `Makefile.am' files:

  - Use the `config/distclean' script to remove the generated `configure'
    script, the generated `aclocal.m4' file and the generated `Makefile.in'
    files.

  - Use the `config/bootstrap' script to generate the `configure' script
    and the necessary `Makefile.in' files. This script makes use of the
    GNU auto-tools `aclocal', `automake', and `autoconf'.


Compilation and Linking Options
===============================

Some systems require compilation or linking options that the `configure'
script does not define. You can define the initial values for these
options by setting them in your environment before running the
`configure' script.

Using a Bourne-compatible shell, the command line entry might be:

        > CC=c89 CFLAGS=-O2 LIBS=-lposix ../configure

Or, on systems that have the `env' program, the command line entry might be:

        > env CPPFLAGS=-I/usr/local/include LDFLAGS=-s ../configure


Specifying the System Type
==========================

Some features cannot be automatically determined by `configure' unless
it can detect the host type on which the package will run.
If it prints a message that it cannot determine the host type, 
use the `--host=TYPE' option to define it. TYPE can either be a 
short system name, such as `sun4', or a canonical name with three fields:

     CPU-COMPANY-SYSTEM

See the `config.sub' file for details about the values of each field. If
the `config.sub' file is not included in the package, the package does not
need to know the host type.

If you are building compiler tools for cross-compiling, you can also
use the `--target=TYPE' option to select the type of system for which
the code is produced and the `--build=TYPE' option to select the type of
system on which you are compiling the package.


Sharing Defaults
================

You can set the default values that `configure' scripts share by
creating a site shell script called `config.site'. This file contains the
default values for variables like `CC', `cache_file', and `prefix'.
The `configure' script looks for the `config.site' file in the following 
search precedence:

  1. PREFIX/share/config.site

  2. PREFIX/etc/config.site

Alternatively, you can set the `CONFIG_SITE' environment variable to the
site script path.

Note: The `configure' script for some systems does not look for a site script.


Operation Controls
==================

The `configure' script recognizes the following options to control its
operation:

`--cache-file=FILE'
        Use and save the test results in FILE instead of
        `./config.cache'. Set FILE to `/dev/null' to disable caching
        when debugging `configure'.

`--help'
        Print a summary of `configure' options and exit.

`--quiet'
`--silent'
`-q'
        Do not print messages about checks being made.
        To suppress all normal output, redirect it to `/dev/null'.
        Error messages continue to print.

`--srcdir=DIR'
        Look for the package's source code in directory DIR.
        Typically `configure' determines the directory automatically.

`--version'
        Print the version of `autoconf' used to generate the `configure'
        script and exit.

Other options that are rarely used are available in the `configure' script.
Use the `--help' option to print a list.


2. Installation Notes for Windows
---------------------------------

This release has been tested on Visual C++ 2005/2008/2010, Windows XP, and Windows 7.


Microsoft Visual C++ 2005 (compiler version 8.0) or later
---------------------------------------------------------

The download directory contains two subdirectories: 'msvc80' and
'examples'.

The 'msvc80' directory contains the project and workspace files to
compile the 'systemc.lib' library. Double-click on the 'SystemC.sln'
file to launch Visual C++ 2005 with the workspace file. The workspace file
will have the proper switches set to compile for Visual C++ 2005.
Select `Build SystemC' under the Build menu or press F7 to build
`systemc.lib'.

The `examples' directory contains the project and workspace files to
compile the SystemC examples. Go to one of the examples subdirectories
and double-click on the .vcproj file to launch Visual C++ with the
workspace file. The workspace file will have the proper switches set
to compile for Visual C++ 2005. Select 'Build <example>.exe' under the
Build menu or press F7 to build the example executable.


Creating SystemC Applications
-----------------------------

1. Start Visual Studio. From the Start Page select New Project and Win32 
   Console Project. Type the project name and select a suitable location 
   then click OK.

2. Select the Application Settings page of the Win32 Application Wizard 
   and make sure the 'Empty project' box is ticked. Click 'Finish' to 
   complete the wizard.
   
3. Add new/existing C++ files to the project and edit code.

4. Display the project Property Pages by selecting 'Properties...' from 
   the Project menu. 
   
5. From the C/C++ tab, select the General properties and set 
   'Detect 64-bit Portability Issues' to No

6. From the C/C++ tab, select the Language properties and set 
   'Enable Run-Time Type Info' to Yes

7. From the C/C++ tab, select the Command Line properties and add /vmg
   to the 'Additional Options:' box.

8. From the Linker tab, select the Input properties and type 'systemc.lib' 
   in the 'Additional Dependencies' box.

9. Click OK


Also make sure that the compiler and linker can find the SystemC header 
and library files respectively. There are two ways to do this:

To update the include file and library directory search paths for all
projects:

1. Select Tools -> Options... and the Projects -> VC++ Directories tab
   
2. Select show directories for: Library files

3. Select the 'New' icon and browse to: C:\systemc-2.3.0\msvc80\systemc\debug

4. Select show directories for: Include files

5. Select the 'New' icon and browse to: C:\systemc-2.3.0\src

To add the include file and library directory search paths for the current
project only:

1. Display the project Property Pages by selecting 'Properties...' from 
   the Project menu. 
  
2. From the C/C++ tab, select the General properties and type the path to the 
   SystemC 'src' directory in the text entry field labeled
  'Additional include directories' (e.g. the examples use '..\..\..\src').

3. From the Linker tab, select the General properties and type the path to 
   the SystemC library:   ...\systemc-2.3.0\msvc80\systemc\debug'systemc.lib' 
   in the 'Additional Library Directories:' box.

9. Click OK
  
